/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Ensures request integrity.
 */
export type RequestHashValue = string;
/**
 * Prevents replay attacks by refusing to honor requests that are older than N seconds.
 */
export type JWTCreationTimestamp = number;
/**
 * Ensures server node identity and response integrity.
 */
export type ServerPublicKey = string;
/**
 * Ensures client node identity and request integrity.
 */
export type ClientPublicKey = string;
/**
 * Allows time based access control.
 */
export type JWTExpirationTimestamp = number;
/**
 * Allows time based access control.
 */
export type JWTNotBeforeTimestamp = number;
/**
 * Prevents replay attacks by refusing to honor requests that are older than N seconds.
 */
export type JWTCreationTimestamp1 = number;
/**
 * Provides channel accountability.
 */
export type JWTID = string;
export type DalQueryData = (
  | DalQueryFindQueryItem
  | DalQueryGetQueryItem
  | DalQueryCreateQueryItem
  | DalQueryUpdateQueryItem
  | DalQueryPatchQueryItem
  | DalQueryRemoveQueryItem)[];

export interface SchemaMap {
  "schema.access_challenge.json"?: AccessChallenge;
  "schema.access_request.json"?: AccessRequest;
  "schema.access_response.json"?: AccessResponse;
  "schema.access_token.json"?: AccessToken;
  "schema.auth_init_options.json"?: AuthInitOptions;
  "schema.cache_base.json"?: CacheBase;
  "schema.cache_full.json"?: CacheFull;
  "schema.cache_meta.json"?: CacheMeta;
  "schema.cachestore_create_params.json"?: CachestoreCreateParams;
  "schema.cachestore_find_params.json"?: CachestoreFindParams;
  "schema.cachestore_get_params.json"?: CachestoreGetParams;
  "schema.cachestore_params.json"?: CachestoreParams;
  "schema.cachestore_patch_params.json"?: CachestorePatchParams;
  "schema.cachestore_remove_params.json"?: CachestoreRemoveParams;
  "schema.cachestore_update_params.json"?: CachestoreUpdateParams;
  "schema.dal_params.json"?: DalParams;
  "schema.dalquery_createqueryitem.json"?: DalQueryCreateQueryItem;
  "schema.dalquery_data.json"?: DalQueryData;
  "schema.dalquery_findqueryitem.json"?: DalQueryFindQueryItem;
  "schema.dalquery_getqueryitem.json"?: DalQueryGetQueryItem;
  "schema.dalquery_patchqueryitem.json"?: DalQueryPatchQueryItem;
  "schema.dalquery_removequeryitem.json"?: DalQueryRemoveQueryItem;
  "schema.dalquery_updatequeryitem.json"?: DalQueryUpdateQueryItem;
}
export interface AccessChallenge {
  sub: RequestHashValue;
  iat: JWTCreationTimestamp;
  auth: AuthenticationResponseToken;
}
/**
 * Provides proof of prior authentication and authorization credentials.
 */
export interface AuthenticationResponseToken {
  iss?: ServerPublicKey;
  sub?: ClientPublicKey;
  aud?: LSWPermissions;
  exp?: JWTExpirationTimestamp;
  nbf?: JWTNotBeforeTimestamp;
  iat?: JWTCreationTimestamp1;
  jti?: JWTID;
}
export interface LSWPermissions {
  /**
   * A mapping of LSW paths and permitted methods; paths should have trailling slashes and each of the methods specified will be allowed to be executed against the exact path as well as any of it's descedents unless there is another permission declaration that better matches the path.
   *
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "accessPermissionsKey".
   */
  access?: {
    /**
     * This interface was referenced by `AuthInitOptions`'s JSON-Schema
     * via the `definition` "accessPermissionsRoute".
     */
    [k: string]: ("find" | "get" | "create" | "update" | "patch" | "remove")[];
  };
  /**
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "queryPermissionsKey".
   */
  query?: {
    maxLifetime: number;
    maxPriority: number;
    maxConcurrency: number;
  };
  /**
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "requestPermissionsKey".
   */
  request?: {
    maxConcurrency: number;
    maxExecutionTime: number;
  };
}
export interface AccessRequest {
  sub: ClientPublicKey;
  aud?: LSWPermissions1;
  exp?: number | string;
  nbf?: number | string;
}
export interface LSWPermissions1 {
  /**
   * A mapping of LSW paths and permitted methods; paths should have trailling slashes and each of the methods specified will be allowed to be executed against the exact path as well as any of it's descedents unless there is another permission declaration that better matches the path.
   *
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "accessPermissionsKey".
   */
  access: {
    /**
     * This interface was referenced by `AuthInitOptions`'s JSON-Schema
     * via the `definition` "accessPermissionsRoute".
     */
    [k: string]: ("find" | "get" | "create" | "update" | "patch" | "remove")[];
  };
  /**
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "queryPermissionsKey".
   */
  query?: {
    maxLifetime: number;
    maxPriority: number;
    maxConcurrency: number;
  };
  /**
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "requestPermissionsKey".
   */
  request?: {
    maxConcurrency: number;
    maxExecutionTime: number;
  };
}
export interface AccessResponse {
  iss?: ServerPublicKey;
  sub?: ClientPublicKey;
  aud?: LSWPermissions;
  exp?: JWTExpirationTimestamp;
  nbf?: JWTNotBeforeTimestamp;
  iat?: JWTCreationTimestamp1;
  jti?: JWTID;
}
export interface AccessToken {
  iss?: ServerPublicKey;
  sub?: ClientPublicKey;
  aud?: LSWPermissions;
  exp?: JWTExpirationTimestamp;
  nbf?: JWTNotBeforeTimestamp;
  iat?: JWTCreationTimestamp1;
  jti?: JWTID;
}
export interface AuthInitOptions {
  secretKey: string;
  permissions: {
    access: LSWAccessPermissions;
    request?: LSWRequestPermissions;
    query?: LSWQueryPermissions;
    token?: LSWTokenPermissions;
  };
  maxTokensPerSource?: number;
  clockSkewTolerance?: number;
}
/**
 * A mapping of keys and their corresponding route permissions.
 *
 * This interface was referenced by `AuthInitOptions`'s JSON-Schema
 * via the `definition` "accessPermissions".
 */
export interface LSWAccessPermissions {
  /**
   * A mapping of LSW paths and permitted methods; paths should have trailling slashes and each of the methods specified will be allowed to be executed against the exact path as well as any of it's descedents unless there is another permission declaration that better matches the path.
   *
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "accessPermissionsKey".
   */
  default: {
    /**
     * This interface was referenced by `AuthInitOptions`'s JSON-Schema
     * via the `definition` "accessPermissionsRoute".
     */
    [k: string]: ("find" | "get" | "create" | "update" | "patch" | "remove")[];
  };
  /**
   * A mapping of LSW paths and permitted methods; paths should have trailling slashes and each of the methods specified will be allowed to be executed against the exact path as well as any of it's descedents unless there is another permission declaration that better matches the path.
   *
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "accessPermissionsKey".
   */
  [k: string]: {
    /**
     * This interface was referenced by `AuthInitOptions`'s JSON-Schema
     * via the `definition` "accessPermissionsRoute".
     */
    [k: string]: ("find" | "get" | "create" | "update" | "patch" | "remove")[];
  };
}
/**
 * A mapping of keys and their corresponding route permissions.
 *
 * This interface was referenced by `AuthInitOptions`'s JSON-Schema
 * via the `definition` "requestPermissions".
 */
export interface LSWRequestPermissions {
  /**
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "requestPermissionsKey".
   */
  default: {
    maxConcurrency: number;
    maxExecutionTime: number;
  };
  /**
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "requestPermissionsKey".
   */
  [k: string]: {
    maxConcurrency: number;
    maxExecutionTime: number;
  };
}
/**
 * A mapping of keys and their corresponding query permissions.
 *
 * This interface was referenced by `AuthInitOptions`'s JSON-Schema
 * via the `definition` "queryPermissions".
 */
export interface LSWQueryPermissions {
  /**
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "queryPermissionsKey".
   */
  default: {
    maxLifetime: number;
    maxPriority: number;
    maxConcurrency: number;
  };
  /**
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "queryPermissionsKey".
   */
  [k: string]: {
    maxLifetime: number;
    maxPriority: number;
    maxConcurrency: number;
  };
}
/**
 * A mapping of keys and their corresponding token permissions.
 *
 * This interface was referenced by `AuthInitOptions`'s JSON-Schema
 * via the `definition` "tokenPermissions".
 */
export interface LSWTokenPermissions {
  /**
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "tokenPermissionsKey".
   */
  default: {
    exp: {
      min: number | string;
      max: number | string;
      default: number | string;
    };
    nbf: {
      min: number | string;
      max: number | string;
      default: number | string;
    };
  };
  /**
   * This interface was referenced by `AuthInitOptions`'s JSON-Schema
   * via the `definition` "tokenPermissionsKey".
   */
  [k: string]: {
    exp: {
      min: number | string;
      max: number | string;
      default: number | string;
    };
    nbf: {
      min: number | string;
      max: number | string;
      default: number | string;
    };
  };
}
export interface CacheBase {
  id?: string;
  keyID?: string;
  metadata: {
    type: string;
    title: string;
    summary: string;
    permissions?: {
      /**
       * This interface was referenced by `CacheFull`'s JSON-Schema
       * via the `definition` "listOfKeys".
       */
      access: (string | null)[];
      /**
       * This interface was referenced by `CacheFull`'s JSON-Schema
       * via the `definition` "listOfKeys".
       */
      patch: (string | null)[];
    };
    createdAt?: number;
    modifiedAt?: number;
    expiresAt?: number;
  };
  contents: {
    [k: string]: any;
  };
  metadataSignature?: string;
  contentsSignature?: string;
}
export interface CacheFull {
  id: string;
  keyID: string;
  metadata: {
    type: string;
    title: string;
    summary: string;
    permissions?: {
      /**
       * This interface was referenced by `CacheFull`'s JSON-Schema
       * via the `definition` "listOfKeys".
       */
      access: (string | null)[];
      /**
       * This interface was referenced by `CacheFull`'s JSON-Schema
       * via the `definition` "listOfKeys".
       */
      patch: (string | null)[];
    };
    createdAt?: number;
    modifiedAt?: number;
    expiresAt?: number;
  };
  contents: {
    [k: string]: any;
  };
  metadataSignature?: string;
  contentsSignature?: string;
}
export interface CacheMeta {
  id: string;
  keyID: string;
  metadata: {
    type: string;
    title: string;
    summary: string;
    permissions?: {
      /**
       * This interface was referenced by `CacheFull`'s JSON-Schema
       * via the `definition` "listOfKeys".
       */
      access: (string | null)[];
      /**
       * This interface was referenced by `CacheFull`'s JSON-Schema
       * via the `definition` "listOfKeys".
       */
      patch: (string | null)[];
    };
    createdAt?: number;
    modifiedAt?: number;
    expiresAt?: number;
  };
  contents?: {
    [k: string]: any;
  };
  metadataSignature?: string;
  contentsSignature?: string;
}
export interface CachestoreCreateParams {
  query: {
    keyID?: string;
    $noSignatureValidation?: boolean;
  };
  [k: string]: any;
}
export interface CachestoreFindParams {
  query: {
    $limit?: number;
    $skip?: number;
    $select?: ("id" | "keyID" | "metadata" | "metadataSignature" | "contents" | "contentsSignature")[];
    $noSignatureValidation?: boolean;
    keyID?:
      | string
      | {
          $in?: string[];
          $nin?: string[];
        };
    id?:
      | string
      | {
          $in?: string[];
          $nin?: string[];
        };
    metadata?: {
      /**
       * This interface was referenced by `CachestoreParams`'s JSON-Schema
       * via the `definition` "exclusionFilters".
       */
      type?: {
        $in?: string[];
        $nin?: string[];
      };
      /**
       * This interface was referenced by `CachestoreParams`'s JSON-Schema
       * via the `definition` "timestampFilters".
       */
      createdAt?: {
        $ne?: number;
        $lt?: number;
        $lte?: number;
        $gt?: number;
        $gte?: number;
      };
      /**
       * This interface was referenced by `CachestoreParams`'s JSON-Schema
       * via the `definition` "timestampFilters".
       */
      modifiedAt?: {
        $ne?: number;
        $lt?: number;
        $lte?: number;
        $gt?: number;
        $gte?: number;
      };
      /**
       * This interface was referenced by `CachestoreParams`'s JSON-Schema
       * via the `definition` "timestampFilters".
       */
      expiresAt?: {
        $ne?: number;
        $lt?: number;
        $lte?: number;
        $gt?: number;
        $gte?: number;
      };
    };
  };
  [k: string]: any;
}
export interface CachestoreGetParams {
  query: {
    keyID: string;
    id: string;
    $noSignatureValidation?: boolean;
  };
  [k: string]: any;
}
export interface CachestoreParams {
  query: {
    $limit?: number;
    $skip?: number;
    $select?: ("id" | "keyID" | "metadata" | "metadataSignature" | "contents" | "contentsSignature")[];
    $noSignatureValidation?: boolean;
    keyID?:
      | string
      | {
          $in?: string[];
          $nin?: string[];
        };
    id?:
      | string
      | {
          $in?: string[];
          $nin?: string[];
        };
    metadata?: {
      /**
       * This interface was referenced by `CachestoreParams`'s JSON-Schema
       * via the `definition` "exclusionFilters".
       */
      type?: {
        $in?: string[];
        $nin?: string[];
      };
      /**
       * This interface was referenced by `CachestoreParams`'s JSON-Schema
       * via the `definition` "timestampFilters".
       */
      createdAt?: {
        $ne?: number;
        $lt?: number;
        $lte?: number;
        $gt?: number;
        $gte?: number;
      };
      /**
       * This interface was referenced by `CachestoreParams`'s JSON-Schema
       * via the `definition` "timestampFilters".
       */
      modifiedAt?: {
        $ne?: number;
        $lt?: number;
        $lte?: number;
        $gt?: number;
        $gte?: number;
      };
      /**
       * This interface was referenced by `CachestoreParams`'s JSON-Schema
       * via the `definition` "timestampFilters".
       */
      expiresAt?: {
        $ne?: number;
        $lt?: number;
        $lte?: number;
        $gt?: number;
        $gte?: number;
      };
    };
  };
  [k: string]: any;
}
export interface CachestorePatchParams {
  query: {
    keyID: string;
    id: string;
    $noSignatureValidation?: boolean;
  };
  [k: string]: any;
}
export interface CachestoreRemoveParams {
  query: {
    keyID: string;
    id: string;
    $noSignatureValidation?: boolean;
  };
  [k: string]: any;
}
export interface CachestoreUpdateParams {
  query: {
    keyID: string;
    id: string;
    $noSignatureValidation?: boolean;
  };
  [k: string]: any;
}
export interface DalParams {
  query: {
    scope: string;
    partition: string;
    [k: string]: any;
  };
  [k: string]: any;
}
export interface DalQueryCreateQueryItem {
  op: string;
  query: {
    scope: string;
    partition: string;
    [k: string]: any;
  };
  data: CacheBase;
}
export interface DalQueryFindQueryItem {
  op: string;
  query: {
    scope: string;
    partition: string;
    [k: string]: any;
  };
}
export interface DalQueryGetQueryItem {
  op: string;
  query: {
    scope: string;
    partition: string;
    [k: string]: any;
  };
}
export interface DalQueryUpdateQueryItem {
  op: string;
  query: {
    scope: string;
    partition: string;
    [k: string]: any;
  };
  data: CacheBase | CacheFull;
}
export interface DalQueryPatchQueryItem {
  op: string;
  query: {
    scope: string;
    partition: string;
    [k: string]: any;
  };
  data: CacheBase;
}
export interface DalQueryRemoveQueryItem {
  op: string;
  query: {
    scope: string;
    partition: string;
    [k: string]: any;
  };
}
